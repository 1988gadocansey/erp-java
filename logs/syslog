2018-09-18 17:17:09.127  INFO 68921 --- [restartedMain] application.MessageApplication           : Starting MessageApplication on GADs-MacBook-Pro.local with PID 68921 (/Applications/www/ttu-erp-java-monolith/srms-springboot/target/classes started by gadoo in /Applications/www/ttu-erp-java-monolith/srms-springboot)
2018-09-18 17:17:09.130  INFO 68921 --- [restartedMain] application.MessageApplication           : No active profile set, falling back to default profiles: default
2018-09-18 17:17:09.390  INFO 68921 --- [restartedMain] onfigReactiveWebServerApplicationContext : Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@2e73f1e2: startup date [Tue Sep 18 17:17:09 GMT 2018]; root of context hierarchy
2018-09-18 17:17:10.321  INFO 68921 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$a48dd18b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-09-18 17:17:10.369  INFO 68921 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-09-18 17:17:10.823  INFO 68921 --- [restartedMain] org.mongodb.driver.cluster               : Cluster created with settings {hosts=[localhost:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2018-09-18 17:17:10.824  INFO 68921 --- [restartedMain] org.mongodb.driver.cluster               : Adding discovered server localhost:27017 to client view of cluster
2018-09-18 17:17:10.983  INFO 68921 --- [cluster-ClusterId{value='5ba1331658b0350d39202b14', description='null'}-localhost:27017] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:1, serverValue:1}] to localhost:27017
2018-09-18 17:17:10.987  INFO 68921 --- [cluster-ClusterId{value='5ba1331658b0350d39202b14', description='null'}-localhost:27017] org.mongodb.driver.cluster               : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 0, 0]}, minWireVersion=0, maxWireVersion=7, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2986428}
2018-09-18 17:17:10.988  INFO 68921 --- [cluster-ClusterId{value='5ba1331658b0350d39202b14', description='null'}-localhost:27017] org.mongodb.driver.cluster               : Discovered cluster type of STANDALONE
2018-09-18 17:17:11.020  INFO 68921 --- [restartedMain] org.mongodb.driver.cluster               : Cluster created with settings {hosts=[localhost:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2018-09-18 17:17:11.020  INFO 68921 --- [restartedMain] org.mongodb.driver.cluster               : Adding discovered server localhost:27017 to client view of cluster
2018-09-18 17:17:11.029  INFO 68921 --- [cluster-ClusterId{value='5ba1331758b0350d39202b15', description='null'}-localhost:27017] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:2, serverValue:2}] to localhost:27017
2018-09-18 17:17:11.031  INFO 68921 --- [cluster-ClusterId{value='5ba1331758b0350d39202b15', description='null'}-localhost:27017] org.mongodb.driver.cluster               : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 0, 0]}, minWireVersion=0, maxWireVersion=7, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=825799}
2018-09-18 17:17:11.031  INFO 68921 --- [cluster-ClusterId{value='5ba1331758b0350d39202b15', description='null'}-localhost:27017] org.mongodb.driver.cluster               : Discovered cluster type of STANDALONE
2018-09-18 17:17:11.428  INFO 68921 --- [nioEventLoopGroup-2-2] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:3, serverValue:3}] to localhost:27017
2018-09-18 17:17:12.007  INFO 68921 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/],methods=[GET]}" onto java.lang.String application.IndexController.index()
2018-09-18 17:17:12.014  INFO 68921 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/messages/{id}],methods=[DELETE]}" onto reactor.core.publisher.Mono<java.lang.String> application.message.MessageController.delete(java.lang.Long)
2018-09-18 17:17:12.014  INFO 68921 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/messages/{id}],methods=[GET]}" onto org.springframework.web.reactive.result.view.Rendering application.message.MessageController.message(java.lang.Long)
2018-09-18 17:17:12.014  INFO 68921 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/inbox],methods=[GET]}" onto org.springframework.web.reactive.result.view.Rendering application.message.MessageController.inbox(application.user.User)
2018-09-18 17:17:12.015  INFO 68921 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/login],methods=[GET]}" onto public java.lang.String application.security.LoginController.login()
2018-09-18 17:17:12.018  INFO 68921 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/signup],methods=[POST]}" onto public reactor.core.publisher.Mono<java.lang.String> application.user.SignupController.signup(application.user.User,org.springframework.validation.BindingResult)
2018-09-18 17:17:12.018  INFO 68921 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/signup],methods=[GET]}" onto public reactor.core.publisher.Mono<java.lang.String> application.user.SignupController.signupForm(application.user.User)
2018-09-18 17:17:12.019  INFO 68921 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/users],methods=[GET],produces=[application/json;charset=UTF-8]}" onto public reactor.core.publisher.Flux<application.user.User> application.user.UserController.users()
2018-09-18 17:17:12.093  INFO 68921 --- [restartedMain] o.s.w.r.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
2018-09-18 17:17:12.093  INFO 68921 --- [restartedMain] o.s.w.r.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
2018-09-18 17:17:12.187  INFO 68921 --- [restartedMain] o.s.w.r.r.m.a.ControllerMethodResolver   : Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@2e73f1e2: startup date [Tue Sep 18 17:17:09 GMT 2018]; root of context hierarchy
2018-09-18 17:17:12.197  INFO 68921 --- [restartedMain] o.s.w.r.r.m.a.ControllerMethodResolver   : Detected @ModelAttribute methods in securityControllerAdvice
2018-09-18 17:17:12.456  INFO 68921 --- [restartedMain] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:4, serverValue:4}] to localhost:27017
2018-09-18 17:17:12.702  INFO 68921 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2018-09-18 17:17:12.842  INFO 68921 --- [nioEventLoopGroup-2-3] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:5, serverValue:5}] to localhost:27017
2018-09-18 17:17:12.844  INFO 68921 --- [restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2018-09-18 17:17:12.912  INFO 68921 --- [reactor-http-nio-1] r.ipc.netty.tcp.BlockingNettyContext     : Started HttpServer on /0:0:0:0:0:0:0:0:9090
2018-09-18 17:17:12.929  INFO 68921 --- [restartedMain] o.s.b.web.embedded.netty.NettyWebServer  : Netty started on port(s): 9090
2018-09-18 17:17:12.936  INFO 68921 --- [restartedMain] application.MessageApplication           : Started MessageApplication in 4.177 seconds (JVM running for 5.296)
2018-09-18 17:18:55.137  INFO 68921 --- [Thread-26] onfigReactiveWebServerApplicationContext : Closing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@2e73f1e2: startup date [Tue Sep 18 17:17:09 GMT 2018]; root of context hierarchy
2018-09-18 17:18:55.142  INFO 68921 --- [Thread-26] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown
2018-09-18 17:18:55.145  INFO 68921 --- [Thread-26] org.mongodb.driver.connection            : Closed connection [connectionId{localValue:4, serverValue:4}] to localhost:27017 because the pool has been closed.
2018-09-18 17:18:55.148  INFO 68921 --- [Thread-26] org.mongodb.driver.connection            : Closed connection [connectionId{localValue:3, serverValue:3}] to localhost:27017 because the pool has been closed.
2018-09-18 17:18:55.148  INFO 68921 --- [Thread-26] org.mongodb.driver.connection            : Closed connection [connectionId{localValue:5, serverValue:5}] to localhost:27017 because the pool has been closed.
2018-09-18 17:18:55.151  INFO 68921 --- [reactor-http-nio-1] r.ipc.netty.tcp.BlockingNettyContext     : Stopped HttpServer on /0:0:0:0:0:0:0:0:9090
2018-09-18 17:18:59.679  INFO 69466 --- [restartedMain] application.MessageApplication           : Starting MessageApplication on GADs-MacBook-Pro.local with PID 69466 (/Applications/www/ttu-erp-java-monolith/srms-springboot/target/classes started by gadoo in /Applications/www/ttu-erp-java-monolith/srms-springboot)
2018-09-18 17:18:59.683  INFO 69466 --- [restartedMain] application.MessageApplication           : No active profile set, falling back to default profiles: default
2018-09-18 17:18:59.941  INFO 69466 --- [restartedMain] onfigReactiveWebServerApplicationContext : Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@5aa8868e: startup date [Tue Sep 18 17:18:59 GMT 2018]; root of context hierarchy
2018-09-18 17:19:00.919  INFO 69466 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.ReactiveMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$99291a3e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-09-18 17:19:00.935  INFO 69466 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'methodMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-09-18 17:19:01.210  INFO 69466 --- [restartedMain] org.mongodb.driver.cluster               : Cluster created with settings {hosts=[localhost:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2018-09-18 17:19:01.210  INFO 69466 --- [restartedMain] org.mongodb.driver.cluster               : Adding discovered server localhost:27017 to client view of cluster
2018-09-18 17:19:01.332  INFO 69466 --- [cluster-ClusterId{value='5ba1338558b0350f5a35227a', description='null'}-localhost:27017] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:1, serverValue:6}] to localhost:27017
2018-09-18 17:19:01.336  INFO 69466 --- [cluster-ClusterId{value='5ba1338558b0350f5a35227a', description='null'}-localhost:27017] org.mongodb.driver.cluster               : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 0, 0]}, minWireVersion=0, maxWireVersion=7, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=2901465}
2018-09-18 17:19:01.337  INFO 69466 --- [cluster-ClusterId{value='5ba1338558b0350f5a35227a', description='null'}-localhost:27017] org.mongodb.driver.cluster               : Discovered cluster type of STANDALONE
2018-09-18 17:19:01.370  INFO 69466 --- [restartedMain] org.mongodb.driver.cluster               : Cluster created with settings {hosts=[localhost:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2018-09-18 17:19:01.370  INFO 69466 --- [restartedMain] org.mongodb.driver.cluster               : Adding discovered server localhost:27017 to client view of cluster
2018-09-18 17:19:01.380  INFO 69466 --- [cluster-ClusterId{value='5ba1338558b0350f5a35227b', description='null'}-localhost:27017] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:2, serverValue:7}] to localhost:27017
2018-09-18 17:19:01.381  INFO 69466 --- [cluster-ClusterId{value='5ba1338558b0350f5a35227b', description='null'}-localhost:27017] org.mongodb.driver.cluster               : Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 0, 0]}, minWireVersion=0, maxWireVersion=7, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=641720}
2018-09-18 17:19:01.381  INFO 69466 --- [cluster-ClusterId{value='5ba1338558b0350f5a35227b', description='null'}-localhost:27017] org.mongodb.driver.cluster               : Discovered cluster type of STANDALONE
2018-09-18 17:19:01.714  INFO 69466 --- [nioEventLoopGroup-2-2] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:3, serverValue:8}] to localhost:27017
2018-09-18 17:19:02.171  INFO 69466 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/],methods=[GET]}" onto java.lang.String application.IndexController.index()
2018-09-18 17:19:02.177  INFO 69466 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/messages/{id}],methods=[DELETE]}" onto reactor.core.publisher.Mono<java.lang.String> application.message.MessageController.delete(java.lang.Long)
2018-09-18 17:19:02.177  INFO 69466 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/messages/{id}],methods=[GET]}" onto org.springframework.web.reactive.result.view.Rendering application.message.MessageController.message(java.lang.Long)
2018-09-18 17:19:02.178  INFO 69466 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/inbox],methods=[GET]}" onto org.springframework.web.reactive.result.view.Rendering application.message.MessageController.inbox(application.user.User)
2018-09-18 17:19:02.179  INFO 69466 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/login],methods=[GET]}" onto public java.lang.String application.security.LoginController.login()
2018-09-18 17:19:02.183  INFO 69466 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/signup],methods=[POST]}" onto public reactor.core.publisher.Mono<java.lang.String> application.user.SignupController.signup(application.user.User,org.springframework.validation.BindingResult)
2018-09-18 17:19:02.183  INFO 69466 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/signup],methods=[GET]}" onto public reactor.core.publisher.Mono<java.lang.String> application.user.SignupController.signupForm(application.user.User)
2018-09-18 17:19:02.184  INFO 69466 --- [restartedMain] s.w.r.r.m.a.RequestMappingHandlerMapping : Mapped "{[/users],methods=[GET],produces=[application/json;charset=UTF-8]}" onto public reactor.core.publisher.Flux<application.user.User> application.user.UserController.users()
2018-09-18 17:19:02.238  INFO 69466 --- [restartedMain] o.s.w.r.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
2018-09-18 17:19:02.238  INFO 69466 --- [restartedMain] o.s.w.r.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]
2018-09-18 17:19:02.317  INFO 69466 --- [restartedMain] o.s.w.r.r.m.a.ControllerMethodResolver   : Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@5aa8868e: startup date [Tue Sep 18 17:18:59 GMT 2018]; root of context hierarchy
2018-09-18 17:19:02.325  INFO 69466 --- [restartedMain] o.s.w.r.r.m.a.ControllerMethodResolver   : Detected @ModelAttribute methods in securityControllerAdvice
2018-09-18 17:19:02.614  INFO 69466 --- [restartedMain] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:4, serverValue:9}] to localhost:27017
2018-09-18 17:19:02.892  INFO 69466 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2018-09-18 17:19:02.993  INFO 69466 --- [nioEventLoopGroup-2-3] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:5, serverValue:10}] to localhost:27017
2018-09-18 17:19:02.998  INFO 69466 --- [nioEventLoopGroup-2-4] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:6, serverValue:11}] to localhost:27017
2018-09-18 17:19:03.000  INFO 69466 --- [restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2018-09-18 17:19:03.034  INFO 69466 --- [reactor-http-nio-1] r.ipc.netty.tcp.BlockingNettyContext     : Started HttpServer on /0:0:0:0:0:0:0:0:9090
2018-09-18 17:19:03.034  INFO 69466 --- [restartedMain] o.s.b.web.embedded.netty.NettyWebServer  : Netty started on port(s): 9090
2018-09-18 17:19:03.038  INFO 69466 --- [restartedMain] application.MessageApplication           : Started MessageApplication in 3.666 seconds (JVM running for 4.298)
2018-09-18 17:20:05.821 ERROR 69466 --- [parallel-2] .a.w.r.e.DefaultErrorWebExceptionHandler : Failed to handle request [POST http://localhost:9090/login]

java.lang.IllegalArgumentException: Detected a Non-hex character at 1 or 2 position
	at org.springframework.security.crypto.codec.Hex.decode(Hex.java:62) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.crypto.password.StandardPasswordEncoder.decode(StandardPasswordEncoder.java:105) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.crypto.password.StandardPasswordEncoder.matches(StandardPasswordEncoder.java:80) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.crypto.password.DelegatingPasswordEncoder.matches(DelegatingPasswordEncoder.java:201) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager.lambda$authenticate$0(UserDetailsRepositoryReactiveAuthenticationManager.java:53) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:97) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:178) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_121]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[na:1.8.0_121]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[na:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_121]
	at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_121]
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoFilterFuseable] :
	reactor.core.publisher.Mono.filter(Mono.java:2037)
	org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager.authenticate(UserDetailsRepositoryReactiveAuthenticationManager.java:53)
	application.security.PasswordUpgradeReactiveAuthenticationManager.authenticate(PasswordUpgradeReactiveAuthenticationManager.java:34)
	org.springframework.security.web.server.authentication.AuthenticationWebFilter.authenticate(AuthenticationWebFilter.java:99)
	org.springframework.security.web.server.authentication.AuthenticationWebFilter.lambda$filter$2(AuthenticationWebFilter.java:93)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:457)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.tryEmitScalar(FluxFlatMap.java:432)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:366)
	reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:244)
	reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	reactor.core.publisher.FluxFilterFuseable.subscribe(FluxFilterFuseable.java:51)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141)
	reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:97)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640)
	reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:161)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
	reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:76)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoSubscriberContext.subscribe(MonoSubscriberContext.java:47)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:174)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:189)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:260)
	reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:80)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1085)
	reactor.core.publisher.MonoFilterWhen$MonoFilterWhenMain.innerResult(MonoFilterWhen.java:190)
	reactor.core.publisher.MonoFilterWhen$FilterWhenInner.onNext(MonoFilterWhen.java:255)
	reactor.core.publisher.MonoFilterWhen$FilterWhenInner.onNext(MonoFilterWhen.java:223)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:457)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoFilterWhen$MonoFilterWhenMain.onNext(MonoFilterWhen.java:147)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.onNext(MonoProcessor.java:389)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:398)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoProcessor.add(MonoProcessor.java:531)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:444)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFilterWhen.subscribe(MonoFilterWhen.java:56)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnorePublisher.subscribe(MonoIgnorePublisher.java:41)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:285)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1454)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1328)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:174)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onComplete(FluxFilterFuseable.java:151)
	reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:245)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1642)
	reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:264)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:170)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:79)
	reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:179)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoMap.subscribe(MonoMap.java:52)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:44)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	reactor.core.publisher.FluxIterable$IterableSubscription.fastPath(FluxIterable.java:334)
	reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:199)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onSubscribe(MonoCollectList.java:90)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.drain(FluxFilterWhen.java:287)
	reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onNext(FluxFilterWhen.java:131)
	reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:244)
	reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202)
	reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onSubscribe(FluxFilterWhen.java:190)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.FluxFilterWhen.subscribe(FluxFilterWhen.java:68)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.onNext(MonoProcessor.java:389)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onSubscribe(MonoCollectList.java:90)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoProcessor.add(MonoProcessor.java:531)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:444)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:380)
	reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:398)
	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:465)
	io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884)
Error has been observed by the following operator(s):
	|_	Mono.filter(UserDetailsRepositoryReactiveAuthenticationManager.java:53)
	|_	Mono.switchIfEmpty(UserDetailsRepositoryReactiveAuthenticationManager.java:54)
	|_	Mono.map(UserDetailsRepositoryReactiveAuthenticationManager.java:55)
	|_	Mono.delayUntil(PasswordUpgradeReactiveAuthenticationManager.java:35)
	|_	Mono.flatMap(AuthenticationWebFilter.java:100)
	|_	MonoPublishOn$PublishOnSubscriber.run(SchedulerTask.java:50)
	|_	Mono.onErrorResume(AuthenticationWebFilter.java:101)
	|_	Mono.flatMap(AuthenticationWebFilter.java:93)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.then(AuthenticationWebFilter.java:92)
	|_	Mono.switchIfEmpty(AuthenticationWebFilter.java:92)
	|_	Mono.flatMap(AuthenticationWebFilter.java:93)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(CsrfWebFilter.java:112)
	|_	Mono.then(CsrfWebFilter.java:91)
	|_	Mono.switchIfEmpty(CsrfWebFilter.java:91)
	|_	MonoPublishOn$PublishOnSubscriber.run(SchedulerTask.java:50)
	|_	Mono.onErrorResume(CsrfWebFilter.java:92)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.flatMap(WebFilterChainProxy.java:58)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.flatMap(HiddenHttpMethodFilter.java:91)
	|_	Mono.defer(DefaultWebFilterChain.java:72)


2018-09-18 17:20:09.885 ERROR 69466 --- [parallel-3] .a.w.r.e.DefaultErrorWebExceptionHandler : Failed to handle request [POST http://localhost:9090/login]

java.lang.IllegalArgumentException: Detected a Non-hex character at 1 or 2 position
	at org.springframework.security.crypto.codec.Hex.decode(Hex.java:62) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.crypto.password.StandardPasswordEncoder.decode(StandardPasswordEncoder.java:105) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.crypto.password.StandardPasswordEncoder.matches(StandardPasswordEncoder.java:80) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.crypto.password.DelegatingPasswordEncoder.matches(DelegatingPasswordEncoder.java:201) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager.lambda$authenticate$0(UserDetailsRepositoryReactiveAuthenticationManager.java:53) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:97) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:178) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_121]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[na:1.8.0_121]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[na:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_121]
	at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_121]
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoFilterFuseable] :
	reactor.core.publisher.Mono.filter(Mono.java:2037)
	org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager.authenticate(UserDetailsRepositoryReactiveAuthenticationManager.java:53)
	application.security.PasswordUpgradeReactiveAuthenticationManager.authenticate(PasswordUpgradeReactiveAuthenticationManager.java:34)
	org.springframework.security.web.server.authentication.AuthenticationWebFilter.authenticate(AuthenticationWebFilter.java:99)
	org.springframework.security.web.server.authentication.AuthenticationWebFilter.lambda$filter$2(AuthenticationWebFilter.java:93)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:457)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.tryEmitScalar(FluxFlatMap.java:432)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:366)
	reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:244)
	reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	reactor.core.publisher.FluxFilterFuseable.subscribe(FluxFilterFuseable.java:51)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141)
	reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:97)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640)
	reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:161)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
	reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:76)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoSubscriberContext.subscribe(MonoSubscriberContext.java:47)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:174)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:189)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:260)
	reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:80)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1085)
	reactor.core.publisher.MonoFilterWhen$MonoFilterWhenMain.innerResult(MonoFilterWhen.java:190)
	reactor.core.publisher.MonoFilterWhen$FilterWhenInner.onNext(MonoFilterWhen.java:255)
	reactor.core.publisher.MonoFilterWhen$FilterWhenInner.onNext(MonoFilterWhen.java:223)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:457)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoFilterWhen$MonoFilterWhenMain.onNext(MonoFilterWhen.java:147)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.onNext(MonoProcessor.java:389)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:398)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoProcessor.add(MonoProcessor.java:531)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:444)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFilterWhen.subscribe(MonoFilterWhen.java:56)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnorePublisher.subscribe(MonoIgnorePublisher.java:41)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:285)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1454)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1328)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:174)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onComplete(FluxFilterFuseable.java:151)
	reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:245)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1642)
	reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:264)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:170)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:79)
	reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:179)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoMap.subscribe(MonoMap.java:52)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:44)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	reactor.core.publisher.FluxIterable$IterableSubscription.fastPath(FluxIterable.java:334)
	reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:199)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onSubscribe(MonoCollectList.java:90)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.drain(FluxFilterWhen.java:287)
	reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onNext(FluxFilterWhen.java:131)
	reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:244)
	reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202)
	reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onSubscribe(FluxFilterWhen.java:190)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.FluxFilterWhen.subscribe(FluxFilterWhen.java:68)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.onNext(MonoProcessor.java:389)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onSubscribe(MonoCollectList.java:90)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoProcessor.add(MonoProcessor.java:531)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:444)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:380)
	reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:398)
	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:465)
	io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884)
Error has been observed by the following operator(s):
	|_	Mono.filter(UserDetailsRepositoryReactiveAuthenticationManager.java:53)
	|_	Mono.switchIfEmpty(UserDetailsRepositoryReactiveAuthenticationManager.java:54)
	|_	Mono.map(UserDetailsRepositoryReactiveAuthenticationManager.java:55)
	|_	Mono.delayUntil(PasswordUpgradeReactiveAuthenticationManager.java:35)
	|_	Mono.flatMap(AuthenticationWebFilter.java:100)
	|_	MonoPublishOn$PublishOnSubscriber.run(SchedulerTask.java:50)
	|_	Mono.onErrorResume(AuthenticationWebFilter.java:101)
	|_	Mono.flatMap(AuthenticationWebFilter.java:93)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.then(AuthenticationWebFilter.java:92)
	|_	Mono.switchIfEmpty(AuthenticationWebFilter.java:92)
	|_	Mono.flatMap(AuthenticationWebFilter.java:93)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(CsrfWebFilter.java:112)
	|_	Mono.then(CsrfWebFilter.java:91)
	|_	Mono.switchIfEmpty(CsrfWebFilter.java:91)
	|_	MonoPublishOn$PublishOnSubscriber.run(SchedulerTask.java:50)
	|_	Mono.onErrorResume(CsrfWebFilter.java:92)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.flatMap(WebFilterChainProxy.java:58)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.flatMap(HiddenHttpMethodFilter.java:91)
	|_	Mono.defer(DefaultWebFilterChain.java:72)


2018-09-18 17:20:24.315 ERROR 69466 --- [parallel-4] .a.w.r.e.DefaultErrorWebExceptionHandler : Failed to handle request [POST http://localhost:9090/login]

java.lang.IllegalArgumentException: Detected a Non-hex character at 1 or 2 position
	at org.springframework.security.crypto.codec.Hex.decode(Hex.java:62) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.crypto.password.StandardPasswordEncoder.decode(StandardPasswordEncoder.java:105) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.crypto.password.StandardPasswordEncoder.matches(StandardPasswordEncoder.java:80) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.crypto.password.DelegatingPasswordEncoder.matches(DelegatingPasswordEncoder.java:201) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager.lambda$authenticate$0(UserDetailsRepositoryReactiveAuthenticationManager.java:53) ~[spring-security-core-5.0.6.RELEASE.jar:5.0.6.RELEASE]
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:97) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:450) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:178) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27) ~[reactor-core-3.1.8.RELEASE.jar:3.1.8.RELEASE]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_121]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[na:1.8.0_121]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[na:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_121]
	at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_121]
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Assembly trace from producer [reactor.core.publisher.MonoFilterFuseable] :
	reactor.core.publisher.Mono.filter(Mono.java:2037)
	org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager.authenticate(UserDetailsRepositoryReactiveAuthenticationManager.java:53)
	application.security.PasswordUpgradeReactiveAuthenticationManager.authenticate(PasswordUpgradeReactiveAuthenticationManager.java:34)
	org.springframework.security.web.server.authentication.AuthenticationWebFilter.authenticate(AuthenticationWebFilter.java:99)
	org.springframework.security.web.server.authentication.AuthenticationWebFilter.lambda$filter$2(AuthenticationWebFilter.java:93)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:457)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.tryEmitScalar(FluxFlatMap.java:432)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:366)
	reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:244)
	reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202)
	reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:332)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.FluxFlatMap.subscribe(FluxFlatMap.java:97)
	reactor.core.publisher.FluxFilterFuseable.subscribe(FluxFilterFuseable.java:51)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:141)
	reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:97)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640)
	reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:161)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
	reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:76)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoFilter.subscribe(MonoFilter.java:46)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoSubscriberContext.subscribe(MonoSubscriberContext.java:47)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:174)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:189)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:260)
	reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:80)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:78)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1085)
	reactor.core.publisher.MonoFilterWhen$MonoFilterWhenMain.innerResult(MonoFilterWhen.java:190)
	reactor.core.publisher.MonoFilterWhen$FilterWhenInner.onNext(MonoFilterWhen.java:255)
	reactor.core.publisher.MonoFilterWhen$FilterWhenInner.onNext(MonoFilterWhen.java:223)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:144)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:457)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoFilterWhen$MonoFilterWhenMain.onNext(MonoFilterWhen.java:147)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.onNext(MonoProcessor.java:389)
	reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:198)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:398)
	reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:210)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoProcessor.add(MonoProcessor.java:531)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:444)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFilterWhen.subscribe(MonoFilterWhen.java:56)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnorePublisher.subscribe(MonoIgnorePublisher.java:41)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:285)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1640)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1454)
	reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1328)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:174)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onComplete(FluxFilterFuseable.java:151)
	reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:245)
	reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:1642)
	reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:264)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:170)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:103)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:79)
	reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:179)
	reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	reactor.core.publisher.MonoMap.subscribe(MonoMap.java:52)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:44)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	reactor.core.publisher.FluxIterable$IterableSubscription.fastPath(FluxIterable.java:334)
	reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:199)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onSubscribe(MonoCollectList.java:90)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)
	reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.drain(FluxFilterWhen.java:287)
	reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onNext(FluxFilterWhen.java:131)
	reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:244)
	reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:202)
	reactor.core.publisher.FluxFilterWhen$FluxFilterWhenSubscriber.onSubscribe(FluxFilterWhen.java:190)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:140)
	reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:64)
	reactor.core.publisher.FluxFilterWhen.subscribe(FluxFilterWhen.java:68)
	reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoProcessor.onNext(MonoProcessor.java:389)
	reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:115)
	reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:104)
	reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1083)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:117)
	reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:245)
	reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:130)
	reactor.ipc.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:377)
	reactor.ipc.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:202)
	reactor.ipc.netty.channel.FluxReceive.request(FluxReceive.java:110)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:130)
	reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:149)
	reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onSubscribe(MonoCollectList.java:90)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:163)
	reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86)
	reactor.ipc.netty.channel.FluxReceive.startReceiver(FluxReceive.java:273)
	reactor.ipc.netty.channel.FluxReceive.subscribe(FluxReceive.java:124)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83)
	reactor.ipc.netty.ByteBufFlux.subscribe(ByteBufFlux.java:242)
	reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)
	reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59)
	reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:47)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoProcessor.add(MonoProcessor.java:531)
	reactor.core.publisher.MonoProcessor.subscribe(MonoProcessor.java:444)
	reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)
	reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)
	reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)
	reactor.core.publisher.Mono.subscribe(Mono.java:3080)
	reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:172)
	reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56)
	reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:70)
	reactor.core.publisher.MonoPeekTerminal.subscribe(MonoPeekTerminal.java:61)
	reactor.ipc.netty.channel.ChannelOperations.applyHandler(ChannelOperations.java:380)
	reactor.ipc.netty.http.server.HttpServerOperations.onHandlerStart(HttpServerOperations.java:398)
	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)
	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)
	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:465)
	io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884)
Error has been observed by the following operator(s):
	|_	Mono.filter(UserDetailsRepositoryReactiveAuthenticationManager.java:53)
	|_	Mono.switchIfEmpty(UserDetailsRepositoryReactiveAuthenticationManager.java:54)
	|_	Mono.map(UserDetailsRepositoryReactiveAuthenticationManager.java:55)
	|_	Mono.delayUntil(PasswordUpgradeReactiveAuthenticationManager.java:35)
	|_	Mono.flatMap(AuthenticationWebFilter.java:100)
	|_	MonoPublishOn$PublishOnSubscriber.run(SchedulerTask.java:50)
	|_	Mono.onErrorResume(AuthenticationWebFilter.java:101)
	|_	Mono.flatMap(AuthenticationWebFilter.java:93)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.then(AuthenticationWebFilter.java:92)
	|_	Mono.switchIfEmpty(AuthenticationWebFilter.java:92)
	|_	Mono.flatMap(AuthenticationWebFilter.java:93)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(CsrfWebFilter.java:112)
	|_	Mono.then(CsrfWebFilter.java:91)
	|_	Mono.switchIfEmpty(CsrfWebFilter.java:91)
	|_	MonoPublishOn$PublishOnSubscriber.run(SchedulerTask.java:50)
	|_	Mono.onErrorResume(CsrfWebFilter.java:92)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.flatMap(WebFilterChainProxy.java:58)
	|_	Mono.defer(DefaultWebFilterChain.java:72)
	|_	Mono.flatMap(HiddenHttpMethodFilter.java:91)
	|_	Mono.defer(DefaultWebFilterChain.java:72)


2018-09-18 17:21:33.616  INFO 69466 --- [Thread-25] onfigReactiveWebServerApplicationContext : Closing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@5aa8868e: startup date [Tue Sep 18 17:18:59 GMT 2018]; root of context hierarchy
2018-09-18 17:21:33.621  INFO 69466 --- [Thread-25] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown
2018-09-18 17:21:33.624  INFO 69466 --- [Thread-25] org.mongodb.driver.connection            : Closed connection [connectionId{localValue:4, serverValue:9}] to localhost:27017 because the pool has been closed.
2018-09-18 17:21:33.627  INFO 69466 --- [Thread-25] org.mongodb.driver.connection            : Closed connection [connectionId{localValue:3, serverValue:8}] to localhost:27017 because the pool has been closed.
2018-09-18 17:21:33.628  INFO 69466 --- [Thread-25] org.mongodb.driver.connection            : Closed connection [connectionId{localValue:5, serverValue:10}] to localhost:27017 because the pool has been closed.
2018-09-18 17:21:33.628  INFO 69466 --- [Thread-25] org.mongodb.driver.connection            : Closed connection [connectionId{localValue:6, serverValue:11}] to localhost:27017 because the pool has been closed.
2018-09-18 17:21:33.631  INFO 69466 --- [reactor-http-nio-1] r.ipc.netty.tcp.BlockingNettyContext     : Stopped HttpServer on /0:0:0:0:0:0:0:0:9090
